<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Victor Jiang's Blog]]></title>
  <link href="http://victorjiang.github.io/atom.xml" rel="self"/>
  <link href="http://victorjiang.github.io/"/>
  <updated>2015-03-06T09:12:14+08:00</updated>
  <id>http://victorjiang.github.io/</id>
  <author>
    <name><![CDATA[Victor Jiang]]></name>
    <email><![CDATA[victorjiang0528@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何根据设备选择不同尺寸的图片]]></title>
    <link href="http://victorjiang.github.io/blog/2015/03/04/ru-he-gen-ju-she-bei-xuan-ze-bu-tong-chi-cun-de-tu-pian/"/>
    <updated>2015-03-04T00:03:20+08:00</updated>
    <id>http://victorjiang.github.io/blog/2015/03/04/ru-he-gen-ju-she-bei-xuan-ze-bu-tong-chi-cun-de-tu-pian</id>
    <content type="html"><![CDATA[<p>在项目中，可以通过设置不同尺寸设备的LaunchImage，来使得App适配这些设备，项目中其他地方使用的图片，只能设置为@1x、@2x、@3x，并且这些图都是成比例的。要是在不同不同尺寸设备上使用不同大小的图片，则需要在代码中一一判断，然后加载。</p>

<!--more-->


<p>现有一个案例是，App第一次启动的时候需要加载引导页，引导页一般都是全屏的图片，这个时候对于不同尺寸的设备来说，就需要不同大小的引导图片了。方法肯定是通过判断设备尺寸来选择加载哪种大小的图片，在<a href="http://stackoverflow.com/questions/25892207/how-to-specify-size-for-iphone-6-customised-edge-to-edge-image">StackOverFlow</a>上看到利用扩展UIImage来实现该效果，有方便也有不方便之处：</p>

<ul>
<li>方便之处在于只要添加该UIImage类别，代码中使用类别中的类方法即可</li>
<li>不方便之处在于，对于图片以及命名来说，有严格要求。图片格式必须要是PNG格式的；图片命名必须按照指定规则</li>
</ul>


<p>当然，总体来说，代码量少了，图片的限制都是一些机械操作，实际上还是方便许多的。下面具体来学学如何根据设备不同选择不同尺寸的图片。</p>

<h2>1 封装UIImage类别</h2>

<p>代码可以在<a href="https://github.com/victorjiang/UIImage-VJDeviceSpecificMedia/">GitHub</a>上下载。</p>

<h3>1.1 设备类型枚举<code>VJDeviceClass</code></h3>

<p>首先看<code>VJDeviceClass</code>这个枚举，根据设备尺寸不同分为以下几种类型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// VJDeviceClass enum
</span><span class='line'>typedef NS_ENUM(NSInteger, VJDeviceClass) {
</span><span class='line'>    // iPhone
</span><span class='line'>    VJDeviceClass_iPhone,
</span><span class='line'>    VJDeviceClass_iPhoneRetina,
</span><span class='line'>    VJDeviceClass_iPhone5,
</span><span class='line'>    VJDeviceClass_iPhone6,
</span><span class='line'>    VJDeviceClass_iPhone6plus,
</span><span class='line'>    
</span><span class='line'>    // iPad
</span><span class='line'>    VJDeviceClass_iPad,
</span><span class='line'>    VJDeviceClass_iPadRetina,
</span><span class='line'>    
</span><span class='line'>    // unKnown
</span><span class='line'>    VJDeviceClass_unKnown
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>设备类型包括iPhone、iPad、以及unKnown，这里发现根据尺寸不同这种说法其实是错误的，严格来说应该是分辨率不同，比如iPhone3GS之前的机型和iPhone4，其实他们尺寸是一样的，但是他们的分辨率不同，iPhone3GS之前的机型是<code>VJDeviceClass_iPhone</code>类型，而iPhone4是<code>VJDeviceClass_iPhoneRetina</code>类型。习惯了说尺寸，在这里解释以下，应该不影响大家的理解。</p>

<h3>1.2 获取当前设备类型</h3>

<p>定义一个函数来获取当前设备的类型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>VJDeviceClass VJ_CurrentDeviceClass()
</span><span class='line'>{
</span><span class='line'>    CGFloat greaterPixelDimension = fmaxf([[UIScreen mainScreen] bounds].size.height, [[UIScreen mainScreen] bounds].size.width);
</span><span class='line'>    
</span><span class='line'>    switch ((NSInteger)greaterPixelDimension) {
</span><span class='line'>        case 480:
</span><span class='line'>            return ([[UIScreen mainScreen] scale] &gt; 1.0) ? VJDeviceClass_iPhoneRetina : VJDeviceClass_iPhone;
</span><span class='line'>            break;
</span><span class='line'>        case 568:
</span><span class='line'>            return VJDeviceClass_iPhone5;
</span><span class='line'>            break;
</span><span class='line'>        case 667:
</span><span class='line'>            return VJDeviceClass_iPhone6;
</span><span class='line'>            break;
</span><span class='line'>        case 736:
</span><span class='line'>            return VJDeviceClass_iPhone6plus;
</span><span class='line'>            break;
</span><span class='line'>        case 1024:
</span><span class='line'>            return ([[UIScreen mainScreen] scale] &gt; 1.0) ? VJDeviceClass_iPadRetina : VJDeviceClass_iPad;
</span><span class='line'>            break;
</span><span class='line'>        default:
</span><span class='line'>            return VJDeviceClass_unKnown;
</span><span class='line'>            break;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>通过获取设备屏幕的尺寸来判断设备的类型，注意，这里就涉及到上面说的iPhone3GS&amp;iPhone4的问题，还需要再根据<code>scale</code>属性来进一步判断，iPad也同样存在这个问题。</p>

<h3>1.3 获取图片对象</h3>

<p>给UIImage的类别添加两个类方法，模仿<code>imageNamed:</code>方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// imageName without suffix, image's type default is PNG
</span><span class='line'>+ (instancetype)vj_imageForDeviceWithName:(NSString *)imageName
</span><span class='line'>{
</span><span class='line'>    return [UIImage vj_imageForDeviceWithName:imageName type:@"png"];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// specify the image's type
</span><span class='line'>+ (instancetype)vj_imageForDeviceWithName:(NSString *)imageName type:(NSString *)type
</span><span class='line'>{
</span><span class='line'>    NSString *suffixString;
</span><span class='line'>    switch (VJ_CurrentDeviceClass()) {
</span><span class='line'>        case VJDeviceClass_iPhone:
</span><span class='line'>            suffixString = @"";
</span><span class='line'>            break;
</span><span class='line'>        case VJDeviceClass_iPhoneRetina:
</span><span class='line'>            suffixString = @"@2x";
</span><span class='line'>            break;
</span><span class='line'>        case VJDeviceClass_iPhone5:
</span><span class='line'>            suffixString = @"-568h@2x";
</span><span class='line'>            break;
</span><span class='line'>        case VJDeviceClass_iPhone6:
</span><span class='line'>            suffixString = @"-667h@2x";
</span><span class='line'>            break;
</span><span class='line'>        case VJDeviceClass_iPhone6plus:
</span><span class='line'>            suffixString = @"-736h@3x";
</span><span class='line'>            break;
</span><span class='line'>        case VJDeviceClass_iPad:
</span><span class='line'>            suffixString = @"~ipad";
</span><span class='line'>            break;
</span><span class='line'>        case VJDeviceClass_iPadRetina:
</span><span class='line'>            suffixString = @"~ipad@2x";
</span><span class='line'>            break;
</span><span class='line'>        case VJDeviceClass_unKnown:
</span><span class='line'>        default:
</span><span class='line'>            suffixString = @"";
</span><span class='line'>            break;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    UIImage *image = nil;
</span><span class='line'>    NSString *imageFullName = [imageName stringByAppendingString:suffixString];
</span><span class='line'>    
</span><span class='line'>    // if type is not png, imageFullName & imageName will append the suffix of type
</span><span class='line'>    if (![[type lowercaseString] isEqualToString:@"png"]) {
</span><span class='line'>        imageFullName = [[imageFullName stringByAppendingString:@"."] stringByAppendingString:type];
</span><span class='line'>        imageName = [[imageName stringByAppendingString:@"."] stringByAppendingString:type];
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    image = [UIImage imageNamed:imageFullName];
</span><span class='line'>    
</span><span class='line'>    if (!image) {
</span><span class='line'>        image = [UIImage imageNamed:imageName];
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    return image;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>参考的<a href="http://stackoverflow.com/questions/25892207/how-to-specify-size-for-iphone-6-customised-edge-to-edge-image">StackOverFlow</a>其实只给了第一个方法，而且方法里并没有判断图片类型，这就存在一个问题，说这个问题之前先说一个需要注意的地方：</p>

<ul>
<li>注：<code>imageName</code>这个参数是不带图片扩展的图片名，如图片<code>image.png</code>，<code>imageName</code>的值应该是<code>image</code>，而不是<code>image.png</code>，看上面方法的实现，其实是在<code>imageName</code>后面拼接字符，所以如果<code>imageName</code>参数带图片扩展的话，最终图片名就不对了。</li>
</ul>


<p>下面再来说这个问题，<a href="http://stackoverflow.com/questions/25892207/how-to-specify-size-for-iphone-6-customised-edge-to-edge-image">StackOverFlow</a>上的代码其实要求图片必须是PNG格式的。UIImage的类方法<code>imageNamed:</code>参数如果是不带扩展的图片名，则默认加载的是PNG格式的图片，如果图片格式为JPEG，获取到的UIImage为nil，加载不出来图片。</p>

<p>所以我在原作者的基础上修改了这个方法，并又增加了一个方法，可以指定图片扩展。<code>vj_imageForDeviceWithName:</code>方法默认加载PNG格式的图片。</p>

<h2>2 修改图片名称</h2>

<p>根据代码可以看出，不同尺寸设备，其实是加载不同的图片，通过给imageName后拼接不同的后缀实现。</p>

<ul>
<li>iPhoneRetina  &mdash;&ndash;>        &ldquo;@2x&rdquo;           &mdash;&ndash;>    960 × 640</li>
<li>iPhone5           &mdash;&ndash;>        &ldquo;-568h@2x&rdquo;  &mdash;&ndash;>    1136 × 640</li>
<li>iPhone6           &mdash;&ndash;>        &ldquo;-667h@2x&rdquo;  &mdash;&ndash;>    1334 × 750</li>
<li>iPhone6plus       &mdash;&ndash;>        &ldquo;-736h@3x&rdquo;      &mdash;&ndash;>    2208 × 1242</li>
<li>iPad              &mdash;&ndash;>        &ldquo;~ipad&rdquo;     &mdash;&ndash;>    1024 × 768</li>
<li>iPadRetina        &mdash;&ndash;>        &ldquo;~ipad@2x&rdquo;      &mdash;&ndash;>    2048 × 1536</li>
</ul>


<p>iPhone和unKnown类型不用拼接后缀。</p>

<p>修改图片名称，我是用的Automator的Service，通过添加Service能够快速的设置，还可以批量设置。</p>

<!--添加图片1-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2015/uiimage_device_1.png" alt="apns_prac_1" /></p>

<p>打开Automator，选择Service</p>

<!--添加图片2-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2015/uiimage_device_2.png" alt="apns_prac_1" /></p>

<ol>
<li>选择<strong>Files&amp;Folders</strong></li>
<li>双击<strong>Rename Finder Items</strong></li>
<li>添加</li>
</ol>


<p>接下来就是设置该Service了，如图：</p>

<!--添加图片3-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2015/uiimage_device_3.png" alt="apns_prac_1" /></p>

<ol>
<li>选择Finder中的图片文件</li>
<li>选择添加文本</li>
<li>输入要添加的字符，以及设置字符添加的位置，这里设置在原文件名后面添加</li>
<li>保存为<code>-568h@2x</code>（Command + s）</li>
</ol>


<p>这样就完成了一个Service的添加，接下来就可以快速修改图片名称了，在Finder中找到要修改的图，选中右击，在选项框中选择Services，就会出现刚刚添加的Service<code>-568h@2x</code>。</p>

<!--添加图片4-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2015/uiimage_device_4.png" alt="apns_prac_1" /></p>

<p>类似，可以添加其他Services，如图中的<code>-736h@3x</code>、<code>~ipad@2x</code>等等，其实还可以添加一些别的Services，如图中本人添加的<code>Compress_50%</code>，美工给的图基本是高清的，需要自己压缩一下；还有<code>Compress_120*120</code>，用于设置Icon；以及<code>png</code>、<code>jpg</code>，将图片转换成对应的类型。需要什么样的Service都可以去Automator中添加，用起来还是很方便的。</p>

<h2>3 添加图片到工程中</h2>

<p>需要注意的是，不能将这些图添加到<code>Images.xcassets</code>中，只能添加在工程的目录结构中，原因是添加到<code>Images.xcassets</code>中的图片，如果图片名中存在<code>@2x</code>、<code>@3x</code>，则这些图会被处理，图片名删掉<code>@2x</code>、<code>@3x</code>，并且把图片放在相应的位置上。</p>

<h2>总结</h2>

<p>总的来说，通过给UIImage添加扩展的方法来选择不同尺寸设备的图片还是挺方面的，虽然说有许多限制，但最终还是能实现该效果。</p>

<h2>参考</h2>

<p><a href="http://stackoverflow.com/questions/26703083/asset-catalog-images-of-type-retina-4-2x-not-presented-on-iphone-6">http://stackoverflow.com/questions/26703083/asset-catalog-images-of-type-retina-4-2x-not-presented-on-iphone-6</a></p>

<p><a href="http://stackoverflow.com/questions/25892207/how-to-specify-size-for-iphone-6-customised-edge-to-edge-image">http://stackoverflow.com/questions/25892207/how-to-specify-size-for-iphone-6-customised-edge-to-edge-image</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015年规划及目标]]></title>
    <link href="http://victorjiang.github.io/blog/2015/02/28/2015nian-gui-hua-ji-mu-biao/"/>
    <updated>2015-02-28T16:27:18+08:00</updated>
    <id>http://victorjiang.github.io/blog/2015/02/28/2015nian-gui-hua-ji-mu-biao</id>
    <content type="html"><![CDATA[<p>转眼间，2015年已快进入第三个月份了，春节也过去几天了，显然我还没有从春节的气氛中缓过来，沉浸在没有上午的日子里。</p>

<p>Anyway，还是要赶紧收收心，回到工作的正规上来，于是乎给自己在新的一年里制定了几个目标，希望自己能够尽量都一一实现：</p>

<!--more-->


<h2>1. 坚持写技术博客</h2>

<p>目标是每个月至少写一篇技术博客，其实说来惭愧，本来有一篇关于多媒体播放的文章打算一月份的时候写的，也做了一些笔记，后来打算二月份的时候写吧，二月份过了个年，什么都忘了。不过后面还是希望自己能坚持这个目标，接下来先把多媒体播放的这篇文章补上。</p>

<h2>2. 使用Swift开发项目</h2>

<p>去年6月份，苹果推出了新的iOS开发语言——Swift，到现在已经学习了Swift的大部分知识，也早已摩拳擦掌，准备拿出来练练手了。虽然Swift语言还不够成熟，但有幸能见证一门语言的成长，感觉还是不错的。</p>

<h2>3. 学习一门其他开发语言</h2>

<p>暂定的目标是——JavaScript，为什么选择JS，原因是自己对Web App开发还没有涉及过，Web App开发虽然不能完全替代Native App，但这门技术还是需要掌握的，Web App开发能带来许多的好处，现在也已经有很多的App有该功能了。当然，Web App开发不仅仅要学习JavaScript，同样还需要知道HTML、CSS，这两个由于之前有学习一点，了解过，所以在学习Web App开发的同时需要巩固这两个的知识。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Block的五种使用场景]]></title>
    <link href="http://victorjiang.github.io/blog/2015/01/05/blockde-wu-chong-shi-yong-chang-jing/"/>
    <updated>2015-01-05T23:08:02+08:00</updated>
    <id>http://victorjiang.github.io/blog/2015/01/05/blockde-wu-chong-shi-yong-chang-jing</id>
    <content type="html"><![CDATA[<p>关于Block（闭包）的介绍就不具体的介绍了，可以自行搜索，Block其实就是一个函数块，这里主要讲Block的使用。主要有以下五种情况：</p>

<!--more-->


<h3>1. 作为本地变量</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>returnType (^blockName)(parameterTypes) = ^returnType(parameters) {...};</span></code></pre></td></tr></table></div></figure>


<h3>2. 作为类的属性</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, copy) returnType (^blockName)(parameterTypes);</span></code></pre></td></tr></table></div></figure>


<h3>3. 作为方法的参数</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)someMethodThatTakesABlock:(returnType (^)(parameterTypes))blockName;</span></code></pre></td></tr></table></div></figure>


<h3>4. 调用带Block的方法</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[someObject someMethodThatTakesABlock:^returnType (parameters) {...}];</span></code></pre></td></tr></table></div></figure>


<h3>5. typedef一个Block</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef returnType (^TypeName)(parameterTypes);
</span><span class='line'>TypeName blockName = ^returnType(parameters) {...};</span></code></pre></td></tr></table></div></figure>


<p>这里，1、4、5中后面的表达式<code>^returnType(parameters) {...}</code>可以省略<code>returnType</code>，写成这样:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>returnType (^blockName)(parameterTypes) = ^(parameters) {...};
</span><span class='line'>[someObject someMethodThatTakesABlock:^(parameters) {...}];
</span><span class='line'>TypeName blockName = ^(parameters) {...};</span></code></pre></td></tr></table></div></figure>


<p>国外有一个网站就用一个域名光介绍Block的这五种使用场景，真够浪费这域名的。<a href="http://fuckingblocksyntax.com/">fuckingblocksyntax</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[切换移动网络开关的扩展]]></title>
    <link href="http://victorjiang.github.io/blog/2014/12/13/qie-huan-yi-dong-wang-luo-kai-guan-de-kuo-zhan/"/>
    <updated>2014-12-13T15:12:31+08:00</updated>
    <id>http://victorjiang.github.io/blog/2014/12/13/qie-huan-yi-dong-wang-luo-kai-guan-de-kuo-zhan</id>
    <content type="html"><![CDATA[<p>当初看到<a href="http://weibo.com/6david9?from=myfollow_group">6david9</a>的一篇博客<a href="http://blog.cocoabit.com/blog/2014/09/29/shi-yongcoretelephony-zhong-de-si-you-jie-kou-she-zhi-yi-dong-wang-luo-kai-guan/">使用 CORETELEPHONY 中的私有接口设置移动网络开关</a>，然后想到给它加一个Today类型的Extension，直接下拉就可以快速设置，配上系统自带的上拉设置WiFi，堪称完美。</p>

<!--more-->


<p>项目地址：<a href="https://github.com/victorjiang/MobileDataSwitch">https://github.com/victorjiang/MobileDataSwitch</a></p>

<p>设置网络开关的私有接口：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>extern BOOL CTCellularDataPlanGetIsEnabled();   // 查询
</span><span class='line'>extern void CTCellularDataPlanSetIsEnabled(BOOL enabled);   // 设置</span></code></pre></td></tr></table></div></figure>


<p>需要添加 CoreTelephony.framework 框架</p>

<p>第一次使用Widget，TodayViewController的视图是居中显示的</p>

<!-- 图1 -->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/cellular_extension_1.jpg" alt="cellular_extension_1" /></p>

<p>之后下拉的时候，Widget的内容会向上偏移</p>

<!-- 图2 -->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/cellular_extension_2.jpg" alt="cellular_extension_2" /></p>

<p>原因是TodayViewController的<code>- widgetMarginInsetsForProposedMarginInsets:defaultMarginInsets</code>方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (UIEdgeInsets)widgetMarginInsetsForProposedMarginInsets:(UIEdgeInsets)defaultMarginInsets
</span><span class='line'>{
</span><span class='line'>    //defaultMarginInsets = (top = 0, left = 47, bottom = 39, right = 0)
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>默认下边距有39个单位，解决办法为修改下边距为0，这样视图就居中了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (UIEdgeInsets)widgetMarginInsetsForProposedMarginInsets:(UIEdgeInsets)defaultMarginInsets
</span><span class='line'>{
</span><span class='line'>    defaultMarginInsets.bottom = 0;
</span><span class='line'>    return defaultMarginInsets;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<!-- 图3 -->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/cellular_extension_3.jpg" alt="cellular_extension_3" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在iOS中使用Icon Font]]></title>
    <link href="http://victorjiang.github.io/blog/2014/06/17/zai-ios-zhong-shi-yong-icon-font/"/>
    <updated>2014-06-17T10:16:03+08:00</updated>
    <id>http://victorjiang.github.io/blog/2014/06/17/zai-ios-zhong-shi-yong-icon-font</id>
    <content type="html"><![CDATA[<!-- photo 1 -->


<p><img src="http://victorjiang.github.io/images/2014/icon_font_1.jpg" alt="photo 1" /></p>

<p>最近公司在做一个OA项目,项目中有一个天气模块,这边天气的数据接口是由<a href="http://cj.weather.com.cn/">国家气象局</a>提供,接口同时提供了天气图标,不过需要通过图标的网络地址去加载,而且大小风格固定,不一定适合App的样式.是就将用该图标还是让美工设计一套?</p>

<!--more-->


<p>于是乎打算去网上找找有没有类似的天气类的应用,在GitHub上找到一个<a href="https://github.com/CZWeatherKit/CZWeatherKit">CZWeatherKit</a>的开源应用,运行了下,这界面,这图标正是我想要的iOS7风格,但在工程里并没有找到任何天气的图标,遂研究一下他的代码.</p>

<p>最终在绘制界面的代码中找到了答案:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>self.weatherView.conditionIconLabel.text = [NSString stringWithFormat:@"%c", condition.climaconCharacter];</span></code></pre></td></tr></table></div></figure>


<p>但是,可是,怎么会用一个<code>UILabel</code>去展示一个图标,是不是错了?怎么是<code>conditionIconLabel</code>,于是从label.text的赋值查找,<code>condition.climaconCharacter</code>的类型是<code>Climacon</code>,看定义是一个枚举类型,每一个元素都是一个字符.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef enum {
</span><span class='line'>    ClimaconCloud                   = '!',
</span><span class='line'>    ClimaconCloudSun                = '"',
</span><span class='line'>    ClimaconCloudMoon               = '#',
</span><span class='line'>    
</span><span class='line'>    ClimaconRain                    = '$',
</span><span class='line'>    ClimaconRainSun                 = '%',
</span><span class='line'>    ClimaconRainMoon                = '&',
</span><span class='line'>    
</span><span class='line'>    ClimaconRainAlt                 = '\'',
</span><span class='line'>    ClimaconRainSunAlt              = '(',
</span><span class='line'>    ClimaconRainMoonAlt             = ')',
</span><span class='line'>
</span><span class='line'>    ClimaconDownpour                = '*',
</span><span class='line'>    ClimaconDownpourSun             = '+',
</span><span class='line'>    ClimaconDownpourMoon            = ',',
</span><span class='line'>    
</span><span class='line'>    ClimaconDrizzle                 = '-',
</span><span class='line'>    ClimaconDrizzleSun              = '.',
</span><span class='line'>    ClimaconDrizzleMoon             = '/',
</span><span class='line'>    
</span><span class='line'>    ClimaconSleet                   = '0',
</span><span class='line'>    ClimaconSleetSun                = '1',
</span><span class='line'>    ClimaconSleetMoon               = '2',
</span><span class='line'>    
</span><span class='line'>    ClimaconHail                    = '3',
</span><span class='line'>    ClimaconHailSun                 = '4',
</span><span class='line'>    ClimaconHailMoon                = '5',
</span><span class='line'>    
</span><span class='line'>    ClimaconFlurries                = '6',
</span><span class='line'>    ClimaconFlurriesSun             = '7',
</span><span class='line'>    ClimaconFlurriesMoon            = '8',
</span><span class='line'>    
</span><span class='line'>    ClimaconSnow                    = '9',
</span><span class='line'>    ClimaconSnowSun                 = ':',
</span><span class='line'>    ClimaconSnowMoon                = ';',
</span><span class='line'>    
</span><span class='line'>    ClimaconFog                     = '&lt;',
</span><span class='line'>    ClimaconFogSun                  = '=',
</span><span class='line'>    ClimaconFogMoon                 = '&gt;',
</span><span class='line'>    
</span><span class='line'>    ClimaconHaze                    = '?',
</span><span class='line'>    ClimaconHazeSun                 = '@',
</span><span class='line'>    ClimaconHazeMoon                = 'A',
</span><span class='line'>    
</span><span class='line'>    ClimaconWind                    = 'B',
</span><span class='line'>    ClimaconWindCloud               = 'C',
</span><span class='line'>    ClimaconWindCloudSun            = 'D',
</span><span class='line'>    ClimaconWindCloudMoon           = 'E',
</span><span class='line'>    
</span><span class='line'>    ClimaconLightning               = 'F',
</span><span class='line'>    ClimaconLightningSun            = 'G',
</span><span class='line'>    ClimaconLightningMoon           = 'H',
</span><span class='line'>    
</span><span class='line'>    ClimaconSun                     = 'I',
</span><span class='line'>    ClimaconSunset                  = 'J',
</span><span class='line'>    ClimaconSunrise                 = 'K',
</span><span class='line'>    ClimaconSunLow                  = 'L',
</span><span class='line'>    ClimaconSunLower                = 'M',
</span><span class='line'>    
</span><span class='line'>    ClimaconMoon                    = 'N',
</span><span class='line'>    ClimaconMoonNew                 = 'O',
</span><span class='line'>    ClimaconMoonWaxingCrescent      = 'P',
</span><span class='line'>    ClimaconMoonWaxingQuarter       = 'Q',
</span><span class='line'>    ClimaconMoonWaxingGibbous       = 'R',
</span><span class='line'>    ClimaconMoonFull                = 'S',
</span><span class='line'>    ClimaconMoonWaningGibbous       = 'T',
</span><span class='line'>    ClimaconMoonWaningQuarter       = 'U',
</span><span class='line'>    ClimaconMoonWaningCrescent      = 'V',
</span><span class='line'>    
</span><span class='line'>    ClimaconSnowflake               = 'W',
</span><span class='line'>    ClimaconTornado                 = 'X',
</span><span class='line'>    
</span><span class='line'>    ClimaconThermometer             = 'Y',
</span><span class='line'>    ClimaconThermometerLow          = 'Z',
</span><span class='line'>    ClimaconThermometerMediumLoew   = '[',
</span><span class='line'>    ClimaconThermometerMediumHigh   = '\\',
</span><span class='line'>    ClimaconThermometerHigh         = ']',
</span><span class='line'>    ClimaconThermometerFull         = '^',
</span><span class='line'>    ClimaconCelsius                 = '_',
</span><span class='line'>    ClimaconFahrenheit              = '\'',
</span><span class='line'>    ClimaconCompass                 = 'a',
</span><span class='line'>    ClimaconCompassNorth            = 'b',
</span><span class='line'>    ClimaconCompassEast             = 'c',
</span><span class='line'>    ClimaconCompassSouth            = 'd',
</span><span class='line'>    ClimaconCompassWest             = 'e',
</span><span class='line'>    
</span><span class='line'>    ClimaconUmbrella                = 'f',
</span><span class='line'>    ClimaconSunglasses              = 'g',
</span><span class='line'>    
</span><span class='line'>    ClimaconCloudRefresh            = 'h',
</span><span class='line'>    ClimaconCloudUp                 = 'i',
</span><span class='line'>    ClimaconCloudDown               = 'j'
</span><span class='line'>} Climacon;</span></code></pre></td></tr></table></div></figure>


<p>又产生一个疑问,既然是字符,<code>UILabel</code>不是应该显示该字符吗?<code>conditionIconLabel</code>在初始化的时候设置了字体为:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// UIFont name of the Climacon font
</span><span class='line'>#define CLIMACON_FONT @"Climacons-Font"
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>[self.conditionIconLabel setFont:[UIFont fontWithName:CLIMACON_FONT size:fontSize]];</span></code></pre></td></tr></table></div></figure>


<p>原来是用的自定义的Icon字体,字体文件<code>Climacons.ttf</code>.下面进入正题.</p>

<h2>一、如何使用自定义字体</h2>

<p>在讲Icon Font之前,先来看看普通自定义字体是如何使用的.</p>

<h3>1.导入字体文件</h3>

<!-- photo 2 -->


<p><img src="http://victorjiang.github.io/images/2014/icon_font_2.png" alt="photo 2" /></p>

<h3>2.配置.plist文件</h3>

<p>在.plist文件中注册自定义字体</p>

<!-- photo 3 -->


<p><img src="http://victorjiang.github.io/images/2014/icon_font_3.png" alt="photo 3" /></p>

<h3>3.找到自定义字体名称</h3>

<p>注册完之后,需要检测自定义字体是否注册成功,并获取新字体名称,检测方法就是遍历所有安装字体,查看是否包含新注册字体:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for (NSString *familyName in [UIFont familyNames]) {
</span><span class='line'>        NSLog(@"familyName = %@", familyName);
</span><span class='line'>        
</span><span class='line'>        for (NSString *fontName in [UIFont fontNamesForFamilyName:familyName]) {
</span><span class='line'>            NSLog(@"    fontName = %@", fontName);
</span><span class='line'>        }
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>查看控制台打印出来的所有字体是否有新注册的字体,如果有,则注册成功,并记住字体名(<code>Kaushan Script</code>),后面会用到.</p>

<!-- photo 4 -->


<p><img src="http://victorjiang.github.io/images/2014/icon_font_4.png" alt="photo 4" /></p>

<h3>4.使用自定义字体</h3>

<p>只要设置<code>UILabel</code>的<code>font</code>为自定义字体即可</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>self.label.font = [UIFont fontWithName:@"Kaushan Script" size:35];
</span><span class='line'>    self.label.text = @"Hello World";
</span><span class='line'>    self.label.textColor = [UIColor blueColor];</span></code></pre></td></tr></table></div></figure>




<!-- photo 5 -->


<p><img src="http://victorjiang.github.io/images/2014/icon_font_5.png" alt="photo 5" /></p>

<h2>二、如何使用Icon Font</h2>

<p>这里我使用上面天气的图标字体文件<code>Climacons.ttf</code></p>

<h3>1.导入图标字体文件</h3>

<h3>2.配置.plist文件</h3>

<p>前两部和普通字体一样将字体注册到项目中</p>

<h3>3.找到图标对应的Unicode编码</h3>

<!-- photo 6 -->


<p><img src="http://victorjiang.github.io/images/2014/icon_font_6.png" alt="photo 6" /></p>

<p>从图中可以看出类似<code>E800</code>就是各Icon的Unicode码</p>

<h3>4.使用Icon Font</h3>

<p>使用图标字体只需要两步:</p>

<ol>
<li>设置控件的font属性为Icon Font</li>
<li>赋值Unicode码</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>self.label.font = [UIFont fontWithName:@"fontello" size:40];
</span><span class='line'>self.label.text = @"\ue800";</span></code></pre></td></tr></table></div></figure>


<p>这样UILabel上就显示了上面的Google图标.</p>

<p>这里注意如何使用Unicode码,</p>

<ol>
<li>使用<code>\u</code>前缀,后面跟四位Unicode码</li>
<li>使用<code>\U</code>前缀,后面跟八位Unicode码</li>
</ol>


<p>比如上面的赋值还可以这样:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>self.label.text = @"\U0000e800";</span></code></pre></td></tr></table></div></figure>


<p>Icon Font的使用虽然很简单,只有两步,但是可读性却很低,不对照上面的图,根本不知道<code>E800</code>对应的是哪张图.可以用一些常量来命名,使阅读者可以清楚其意义</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static NSString * const CustomIconFont_Google = @"\ue800";
</span><span class='line'>static NSString * const CustomIconFont_GitHub = @"\ue801";
</span><span class='line'>static NSString * const CustomIconFont_CSS3 = @"\ue802";
</span><span class='line'>static NSString * const CustomIconFont_Apple = @"\ue803";
</span><span class='line'>static NSString * const CustomIconFont_HTML5 = @"\ue804";</span></code></pre></td></tr></table></div></figure>


<pre><code>注:可以从上面的`CZWeatherKit`看出,他定义了一个enum的`Climacon`,这边不是通过Unicode码来使用Icon Font的,他是通过Name来使用的.
</code></pre>

<p>这里引出一个问题,笔者到现在还没有解决,网上关于Icon Font的资料都是通过Unicode来使用,但是在<code>CZWeatherKit</code>的项目中,是通过Name来使用,打开两者的字体文件,都可以查看到Unicode和Name对应的值,笔者尝试更换Icon Font的使用方式,在<code>CZWeatherKit</code>中通过Unicode对应的值给UILabel赋值,在上面的学习项目中修改通过Name对应的值来给UILabel赋值,结果都不成功.</p>

<p>以及如何通过Index Mode来访问Icon Font,就这一问题,笔者在<a href="http://www.zhihu.com/question/24095915">知乎</a>上也提问了,希望有知道的同学不吝赐教.</p>

<p>参考文章:<a href="http://ued.taobao.org/blog/2013/09/icon-font-in-ios/">在iOS中使用icon font</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[APNs推送实践]]></title>
    <link href="http://victorjiang.github.io/blog/2014/04/01/apnstui-song-shi-jian/"/>
    <updated>2014-04-01T23:01:49+08:00</updated>
    <id>http://victorjiang.github.io/blog/2014/04/01/apnstui-song-shi-jian</id>
    <content type="html"><![CDATA[<p>关于APNs苹果官方有详细介绍，之前我也整理了一份翻译篇<a href="http://victorjiang.github.io/blog/2014/04/01/yi-ping-guo-tui-song-tong-zhi-fu-wu/">《苹果推送通知服务》</a>，由于水平有限，翻译可能存在错误，不过可以起到参考作用，还请指出错误之处，以便及时纠正。</p>

<!--more-->


<p>下面就APNs的一些实践操作进行介绍，包括前期的证书申请以及代码操作：</p>

<h2>一、申请证书</h2>

<h3>1.CSR文件</h3>

<p>通过Keychain Access申请一个CSR文件（CertificateSigningRequest.certSigningRequest），保存到磁盘。</p>

<!--添加图片1-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_prac_1.jpg" alt="apns_prac_1" /></p>

<h3>2.创建App ID</h3>

<p>Bundle ID不能使用通配的，通配的Bundle ID不能用来推送。</p>

<!--添加图片2-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_prac_2.jpg" alt="apns_prac_2" /></p>

<p>App Services勾选Push Notifications</p>

<!--添加图片3-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_prac_3.jpg" alt="apns_prac_3" /></p>

<h3>3.创建开发/发布证书</h3>

<p>根据情况选择创建开发还是发布证书</p>

<!--添加图片4-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_prac_4.jpg" alt="apns_prac_4" /></p>

<p>  或者从App ID里创建</p>

<!--添加图片5-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_prac_5.jpg" alt="apns_prac_5" /></p>

<p>选择刚才创建的App ID</p>

<!--添加图片6-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_prac_6.jpg" alt="apns_prac_6" /></p>

<p>选择CSR文件生成证书（apns.cer），并下载本地。</p>

<!--添加图片7-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_prac_7.jpg" alt="apns_prac_7" /></p>

<!--添加图片8-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_prac_8.jpg" alt="apns_prac_8" /></p>

<h3>4.创建Provisioning Profile文件</h3>

<p>选择profile文件类型</p>

<!--添加图片9-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_prac_9.png" alt="apns_prac_9" /></p>

<p>选择App ID</p>

<!--添加图片10-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_prac_10.jpg" alt="apns_prac_10" /></p>

<p>选择证书、设备后生成文件（apns.mobileprovision），并下载。</p>

<!--添加图片11-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_prac_11.jpg" alt="apns_prac_11" /></p>

<!--添加图片12-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_prac_12.jpg" alt="apns_prac_12" /></p>

<h3>5.导出密钥</h3>

<p>在Keychain Access中导出之前创建的证书的密钥（apns.p12），这里需要对密钥文件进行加密。</p>

<!--添加图片13-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_prac_13.png" alt="apns_prac_13" /></p>

<h3>6.证书处理</h3>

<p>现在我们有下面几个文件：</p>

<ol>
<li>CertificateSigningRequest.certSigningRequest</li>
<li>apns.cer</li>
<li>apns.mobileprovision</li>
<li>apns.p12</li>
</ol>


<p>处理证书是为了让我们的服务端能够可以给APNs发送通知，对于不同的服务端，证书的处理也不同。</p>

<ol>
<li>openssl x509 -in apns.cer -inform der -out PushChatCert.pem</li>
<li>openssl pkcs12 -nocerts -out PushChatKey.pem -in apns.p12</li>
<li>cat PushChatCert.pem PushChatKey.pem > ck.pem</li>
</ol>


<p>如果服务端是.net，第三步需要用下面的命令生成证书</p>

<pre><code>openssl pkcs12 -export -in PushChatCert.pem -inkey PushChatKey.pem -certfile CertificateSigningRequest.certSigningRequest -name "apns_web" -out apns_web.p12
</code></pre>

<h2>二、代码操作</h2>

<p><font color='red'>注</font>：项目的Bundle Identify需要与创建的App ID保持一致</p>

<h3>1.注册推送</h3>

<pre><code>
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{

    [[UIApplication sharedApplication] registerForRemoteNotificationTypes:UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound | UIRemoteNotificationTypeAlert];

    return YES;
}
</code></pre>


<ul>
<li>注册成功</li>
</ul>


<pre><code>
- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken
{
    //注册成功，去除deviceToken中的空格和<>
    
    NSLog(@"register success:%@", deviceToken);
    NSString *token = [[[deviceToken description] stringByTrimmingCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@"<>"]] stringByReplacingOccurrencesOfString:@" " withString:@""];
    
}
</code></pre>


<ul>
<li>注册失败</li>
</ul>


<pre><code>
- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error
{
    
}
</code></pre>


<h3>2.接收通知</h3>

<p>接收通知根据App的状态分为三种情况：</p>

<h4>2.1 App未运行</h4>

<p>此时didFinishLaunchingWithOptions方法将被调用</p>

<pre><code>
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    NSDictionary *userInfo = [launchOptions objectForKey: UIApplicationLaunchOptionsRemoteNotificationKey];
    
    //通过userInfo判断程序是通过点击推送通知启动还是正常启动
}
</code></pre>


<h4>2.2 App后台运行</h4>

<p>当用户点击推送消息的时候才会调用下面的方法</p>

<pre><code>
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo
{
    // 处理推送消息
    NSLog(@"userinfo:%@",userInfo);
    
}
</code></pre>


<h4>2.3 App前台运行</h4>

<p>当App正在运行的时候会自动调用上面的didReceiveRemoteNotification方法，此时App的applicationState值为UIApplicationStateActive。</p>

<h4>iOS 7新增方法</h4>

<pre><code>
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult result))completionHandler;
</code></pre>


<h2>参考文章</h2>

<ol>
<li><a href="http://blog.csdn.net/showhilllee/article/details/8631734">一步一步教你做ios推送</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_4adf31ea010175wo.html">net发送apns解决方案（iphone push）</a></li>
<li><a href="http://docs.jpush.cn/pages/viewpage.action?pageId=4259879">获取 APNs 推送内容</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[译]苹果推送通知服务]]></title>
    <link href="http://victorjiang.github.io/blog/2014/04/01/yi-ping-guo-tui-song-tong-zhi-fu-wu/"/>
    <updated>2014-04-01T23:00:43+08:00</updated>
    <id>http://victorjiang.github.io/blog/2014/04/01/yi-ping-guo-tui-song-tong-zhi-fu-wu</id>
    <content type="html"><![CDATA[<p>本文翻译自官网<a href="https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html" target="_blank">Apple Push Notification Service</a>,由于本人英语水平有限，翻译的不是很准确，读者请见谅，欢迎指出不足之处。</p>

<!--more-->


<p>推送通知的核心功能是苹果推送通知服务（简称APNs），它是iOS和OS X设备传输信息的一个可靠的、高效的服务。每台设备将一个可信任和加密的IP与该服务建立连接，通过这个连接接收通知。当应用程序没有运行，这时候接收到一条通知，设备会弹出提示信息。</p>

<p>软件服务器（provider）发起通知，通过一个安全可靠的通道与APNs建立连接，传入将用于客户端应用程序的数据。软件服务器将目标设备发送给APNs，目标设备上的应用程序就会接收到来自APNs的一条新数据。</p>

<h2>1.工作机制</h2>

<p>APNs远程传输从服务器到设备的数据，一条通知由设备令牌（deviceToken）和有效负载（payload）两个主要部分组成。设备令牌类似一串手机号码，它包含安装了App并启用APNs的设备信息，通过该令牌可以定位到该设备。APNs使用设备令牌来授权远程通知。有效负载是一个JSON格式的字符串，指定了目标设备如何进行提示。</p>

<p>软件服务器将设备令牌和有效负载打包发送给APNs，APNs再将有效负载推送给目标设备。</p>

<p>当provider向APNs授权时，会将应用程序的Bundle Identifier发送给APNs。</p>

<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_trans_1.png" alt="apns_trans_1" /></p>

<center>图1-1. 从一个服务器到一个应用程序的推送通知</center>


<p>图1-1是一个非常简单的provider和device直接推送的工作机制，在provider和device方面同时存在多点连接。图1-2描述了一个更真实的推送工作机制</p>

<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_trans_2.png" alt="apns_trans_2" /></p>

<center>图1-2. 多个服务器和多台设备之间的推送通知</center>


<h2>2.服务质量</h2>

<p>APNs包含一个默认的质量服务（QoS）组件，执行存储转发功能。</p>

<p>如果APNs尝试发送一个通知，但是设备处于离线状态，该通知会被存储一段时间，当设备处于在线状态的时候再发送该通知。</p>

<p>一个特定的App只会存储最近的一条通知，如果设备在离线的情况下provider发送多条通知，前面的通知会被丢弃，只保留最后一条。</p>

<p>如果设备长时间处于离线状态，被存储的所有通知都会被丢弃。</p>

<h2>3.安全架构</h2>

<p>为了能在provider和device之间通信，APNs揭露了某些入口点。但是为了确保安全，必须调整这些入口点。为此，APNs需要对provide和device两端分别进行验证。</p>

<p><strong><code>连接验证（Connection trust）</code></strong>包含两方面，一方面是APNs验证与一个授权发送通知的provider连接；另一方面是APNs验证与一个合法的设备的连接。</p>

<p>在APNs与入口点建立信任之后，必须确保通知传送到一个合法的终点。为此，必须确认消息传送的路线，只有预期的设备才能接受它。</p>

<p>在APNs中，为确保精准的消息传送，需要通过设备令牌进行<strong><code>令牌验证（token trust）</code></strong>，设备令牌是设备第一次与APNs连接时，APNs对设备的不透明的标识符。设备与它的provider共享该deviceToken，此后，该令牌包含在provider发送的每一条通知中。</p>

<p>一个特定通知的合法路线是建立信任的基础。</p>

<p><font color='red'>注</font>：设备令牌和设备UDID不是同一回事。</p>

<p>下面讨论连接验证、令牌验证的必要组件，以及建立信任的四个过程。</p>

<h3>APNs与device之间的连接验证</h3>

<p>APNs通过TLS与一台连接的设备建立身份验证（注意，这个阶段的系统负责连接验证，你自己不需要做任何事情）。在这个过程，设备启动一个与APNs的TLS连接，APNs返回他的服务器证书，设备验证该证书，然后发送设备证书给APNs，APNs验证该设备证书。如图3-1：</p>

<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_trans_3.png" alt="apns_trans_3" /></p>

<center>图3-1. APNs与device之间的验证过程</center>


<h3>APNs与provider之间的连接验证</h3>

<p>同APNs与device之间的连接验证一样。</p>

<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_trans_4.png" alt="apns_trans_4" /></p>

<center>图3-2. APNs与provider之间的验证过程</center>


<br />


<p><font color='red'>注</font>：provider连接只对一个特定的App有效，证书中指定了该App的Bundle ID。APNs同时维护一个撤销证书的列表，如果provider的证书在列表中，APNs可以撤销provider验证（即拒绝连接）。</p>

<h3>令牌生成和传播</h3>

<p>应用程序要能接收推送通知必须先注册，通常在应用程序安装后。系统收到一条注册请求，然后与APNs连接，传递该请求。APNs使用设备证书生成一个deviceToken，该deviceToken包含设备的标识符，返回设备加密后的deviceToken。如图3-3：</p>

<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_trans_5.png" alt="apns_trans_5" /></p>

<center>图3-3. 令牌生成和传播过程</center>


<p>应用程序中收到的deviceToken是一个NSData的对象，App然后将deviceToken以二进制或十六进制的形式传递给provider。图3-4中展示了令牌生成和传播的顺序。</p>

<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_trans_6.png" alt="apns_trans_6" /></p>

<center>图3-4. 令牌生成和传播顺序</center>


<h3>令牌验证（通知）</h3>

<p>在系统从APNs获取到deviceToken之后，每一次与APNs的连接必须提供该deviceToken，APNs解密deviceToken并验证令牌是不是连接的设备生成的，然后验证令牌里的设备标识符是否和设备证书里的设备标识符匹配。</p>

<p>provider发送给APNs的每一条通知必须包含deviceToken，APNs通过密钥解密该deviceToken，从而确保通知有效，然后使用deviceToken中的deviceID确定通知的目标设备。</p>

<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_trans_7.png" alt="apns_trans_7" /></p>

<center>图3-5. 令牌验证过程</center>


<h3>验证组件</h3>

<p>为了支持APNs的安全模式，provider和device必须拥有确信的证书，授权证书、或者令牌。</p>

<p><strong>Provider</strong>：每一个provider需要有一个独特的证书和私钥验证与APNs的连接，这个证书由Apple公司提供。对于每一条通知，provider必须提供目标设备的deviceToken给APNs，provider可以选择性的是否验证APNs。</p>

<p><strong>Device</strong>：系统使用包含密钥和证书的公共服务器证书与APNs建立TLS连接，获得设备激活过程中的设备证书和密钥，将其存储在钥匙串中。该系统还拥有其特定的deviceToken，并负责将此deviceToken传递给provider。</p>

<h2>4.通知的有效负载</h2>

<p>每一条推送通知都包含一个有效负载（payload），该payload包含如何让系统弹出提示的信息，以及一些provider自定义的数据。一条通知的payload的最大尺寸为<font color='blue'><em>256</em></font>个字节，APNs拒绝任何超出该限制的通知。</p>

<p>对于每一条通知，都是一个JSON类型的字典对象。这个字典必须通过“<font color='blue'>aps</font>”key包含另外一个字典。这个aps字典包含下面一个或多个属性：</p>

<ul>
<li>向用户显示的提示信息</li>
<li>App 图标上显示的数字</li>
<li>弹出通知的声音</li>
</ul>


<p>当通知到来的时候App没有运行，弹出提示信息，播放声音，App图标显示badge的值；如果App处于运行中，系统将通知作为一个NSDictionary对象传递给application的delegate。</p>

<p>Provider可以在保留字“aps”外自定义有效负载值，自定义的值必须使用JSON结构和基本类型：<font color='blue'>dictionary，array，string，number，Boolean</font>。你不应该包括客户信息（或任何敏感数据）作为自定义的有效负载数据。相反，将其用于多种用途，如设置上下文（用户界面）或内部度量。</p>

<center>表4-1. aps字典的keys和values</center>


<table>
<thead>
<tr>
<th>Key </th>
<th> Value type </th>
<th> Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>alert</td>
<td>string or dictionary</td>
<td>如果包含该属性，系统展示标准的提示，你可以指定一个字符串或者一个字典作为提示的信息，如果值是一个字符串，它将成为提示的文本信息，提示包括两个按钮：关闭和查看。点击查看，启动应用程序。如果值是一个字典，看表4-2对该字典的描述。</td>
</tr>
<tr>
<td>badge</td>
<td>number</td>
<td>应用程序图标上显示的数字。如果该属性的值没有设置，那不改变图标上的数字。设置该属性的值为0可以移除。</td>
</tr>
<tr>
<td>sound</td>
<td>string</td>
<td>应用程序包里的声音文件名。如果设置的声音文件不存在，或者指定了default，则播放默认的声音。</td>
</tr>
<tr>
<td>content-available</td>
<td>number</td>
<td>该值为1表明新内容有效。该属性用在支持杂志和后台下载的App中。杂志App是保证在每24小时内能收到至少一条推送通知。</td>
</tr>
</tbody>
</table>


<center>表4-2. alert字典的keys和values</center>


<table>
<thead>
<tr>
<th>Key </th>
<th> Value type </th>
<th> Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>body</td>
<td>string </td>
<td>   提示的文本信息</td>
</tr>
<tr>
<td>action-loc-key </td>
<td> string or null </td>
<td> 如果指定一个字符串，系统显示带有两个按钮的提示框，其行为如表4-1。该字符串作为一个key去获取本地字符串，然后取代“查看”作为右边按钮的标题。</td>
</tr>
<tr>
<td>loc-key </td>
<td> string </td>
<td> Localizable.strings文件中的一个key，该字符串可以用%@和%n$@ ，loc-args中指定的变量格式化。</td>
</tr>
<tr>
<td>loc-args </td>
<td> array of strings </td>
<td> 出现在loc-key的格式说明符。</td>
</tr>
<tr>
<td>launch-image </td>
<td> string </td>
<td> 程序包里的一张图片的文件名，可以包括文件扩展名或者不包括。该图片作为用户点击按钮或滑动滑块的启动图片。如果没有指定该属性，系统Info.plist文件中通过UILaunchImageFile key指定的图片，或者使用Default.png。</td>
</tr>
</tbody>
</table>


<p><font color='red'>注</font>：如果你想设备显示带关闭和查看按钮的提示框，指定alert的类型为string，不要指定alert的类型为字段，尽管字典中只有一个body属性。</p>

<h2>5.格式化本地字符串</h2>

<p>你可以用两种方式显示本地提示信息，服务器发起的通知定位文本，为此，必须知道当前设备的语言环境；或者客户端应用程序在其包里支持的本地化文件中转换提示信息。provider在通知的有效负载aps字典中指定loc-key和loc-args属性的值，当device接收到通知（假设App不在运行中），使用aps字典属性根据当前语言环境查找本地化文件并格式化字符串，然后显示给用户。</p>

<p>第二种选项工作的更多细节。</p>

<p>应用程序可以按照其支持的每种语言国际化资源文件，比如图片、音频、文本，国际化的资源文件放在包里的一个子目录下，目录名称由两部分组成：语言代码和“<font color='blue'>.lproj</font>”扩展名（例如fr.plroj）。本地化字符串被放在<code>Localizable.strings</code>文件中，文件中的每一个实体都有一个key和string类型的值，该string可以使用格式说明符替换变量值。</p>

<p><font color='red'>注</font>：当action-loc-key属性是一个字符串的时候同样适用，在Localizable.strings文件中设置这个key的值，就能修改提示框右边按钮的标题。</p>

<p>举例说明，provider指定了alert属性的值：</p>

<pre><code>
"alert" : {
    "loc-key" : "GAME_PLAY_REQUEST_FORMAT",
    "loc-args" : [ "Jenna", "Frank"]
}
</code></pre>


<p>当device收到通知，使用&#8221;GAME_PLAY_REQUEST_FORMAT&#8221;作为key在Localizable.strings文件中寻找对应的值。<br/>
假设文件中存在该key的值：
&ldquo;GAME_PLAY_REQUEST_FORMAT&rdquo;= &ldquo;<code>%@ and %@ have invited you to play Monopoly</code>&rdquo;;<br/>
设备显示“<code>Jennaand Frank have invited you to play Monopoly</code>”提示信息。</p>

<p><font color='red'>注</font>：只有你完全需要的时候才应该使用字典类型的alert的loc-key和loc-args属性，许多App不需要这两个属性。</p>

<h2>6.JSON格式的有效负载例子</h2>

<p><font color='red'>注</font>：为了可读性，下面的例子用空格和断行加以修饰。实际当中省略这些来减少有效负载的大小，提升网络性能。</p>

<p><strong>例1</strong>：下面是一个简单的有效负载，aps字典中只带有一个提示信息，当然默认的还有两个按钮（关闭和查看）。该有效负载还带有一个自定义的数组。</p>

<pre><code>
{
    "aps" : { "alert" : "Message received from Bob" },
    "acme2" : [ "bang",  "whiz" ]
}
</code></pre>


<p><strong>例2</strong>：下面的例子自定义了alertView右边按钮的title，此时，“PLAY”是本地文件 Localizable.strings中的key，同时设置appicon的badge数量为5.</p>

<pre><code>
{
    "aps" : {
        "alert" : {
            "body" : "Bob wants to play poker",
            "action-loc-key" : "PLAY"
        },
        "badge" : 5,
    },
    "acme1" : "bar",
    "acme2" : [ "bang",  "whiz" ]
}
</code></pre>


<p><strong>例3</strong>：下面的例子弹出一个带有关闭和查看的提示框，以及设置app icon的badge数量为9，并且当接收到通知的时候播放声音。</p>

<pre><code>
{
    "aps" : {
        "alert" : "You got your emails.",
        "badge" : 9,
        "sound" : "bingbong.aiff"
    },
    "acme1" : "bar",
    "acme2" : 42
}
</code></pre>


<p><strong>例4</strong>：下面的例子使用loc-key和loc-args 。</p>

<pre><code>

{
    "aps" : {
        "alert" : {
            "loc-key" : "GAME_PLAY_REQUEST_FORMAT",
            "loc-args" : [ "Jenna", "Frank"]
        },
        "sound" : "chime"
    },
    "acme" : "foo"
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写在开头]]></title>
    <link href="http://victorjiang.github.io/blog/2014/04/01/xie-zai-kai-tou/"/>
    <updated>2014-04-01T22:59:54+08:00</updated>
    <id>http://victorjiang.github.io/blog/2014/04/01/xie-zai-kai-tou</id>
    <content type="html"><![CDATA[<p>现在时间是：2015年02月28日15:29:01，这篇文章本应该是在去年的4月1日写的，然后拖了一年，内容一直空白。</p>

<p>刚学习iOS的时候，经常在网上看大神的博客，正好Github提供这个搭建个人博客的功能，于是想给自己也建一个博客，一开始也不知道写点什么，知道自己写的文章应该也没多少人看，再加上本人文笔不行，写不出什么高质量的文章来。但是后来看到网上一篇关于鼓励程序员坚持写博客的文章，最终决定写博客了。</p>

<!--more-->


<p>写博客的作用我想都不言而喻了，一方面是很好的总结自己学到的知识；另一方面也是督促自己学习更多的知识。</p>

<p>总结2014年整个一年，其实自己收获的并不多，工作上做了几个项目，并没有很好的提高自己；学习上，今年关于iOS开发新出来了Swift语言，也没有第一时间学习运用起来；生活上，渐渐的要一个人做所有事了。</p>

<p>希望自己在以后的日子里能够不断学习上进，完善充实自己，让自己能拿点本事出来。</p>
]]></content>
  </entry>
  
</feed>
