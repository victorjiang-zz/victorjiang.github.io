<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 技术 | Victor Jiang's Blog]]></title>
  <link href="http://victorjiang.github.io/blog/categories/ji-zhu/atom.xml" rel="self"/>
  <link href="http://victorjiang.github.io/"/>
  <updated>2015-02-28T16:33:24+08:00</updated>
  <id>http://victorjiang.github.io/</id>
  <author>
    <name><![CDATA[Victor Jiang]]></name>
    <email><![CDATA[victorjiang0528@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Block的五种使用场景]]></title>
    <link href="http://victorjiang.github.io/blog/2015/01/05/blockde-wu-chong-shi-yong-chang-jing/"/>
    <updated>2015-01-05T23:08:02+08:00</updated>
    <id>http://victorjiang.github.io/blog/2015/01/05/blockde-wu-chong-shi-yong-chang-jing</id>
    <content type="html"><![CDATA[<p>关于Block（闭包）的介绍就不具体的介绍了，可以自行搜索，Block其实就是一个函数块，这里主要讲Block的使用。主要有以下五种情况：</p>

<!--more-->


<h3>1. 作为本地变量</h3>

<p><code>
returnType (^blockName)(parameterTypes) = ^returnType(parameters) {...};
</code></p>

<h3>2. 作为类的属性</h3>

<p><code>
@property (nonatomic, copy) returnType (^blockName)(parameterTypes);
</code></p>

<h3>3. 作为方法的参数</h3>

<p><code>
- (void)someMethodThatTakesABlock:(returnType (^)(parameterTypes))blockName;
</code></p>

<h3>4. 调用带Block的方法</h3>

<p><code>
[someObject someMethodThatTakesABlock:^returnType (parameters) {...}];
</code></p>

<h3>5. typedef一个Block</h3>

<p><code>
typedef returnType (^TypeName)(parameterTypes);
TypeName blockName = ^returnType(parameters) {...};
</code>
这里，1、4、5中后面的表达式<code>^returnType(parameters) {...}</code>可以省略<code>returnType</code>，写成这样:</p>

<p><code>
returnType (^blockName)(parameterTypes) = ^(parameters) {...};
[someObject someMethodThatTakesABlock:^(parameters) {...}];
TypeName blockName = ^(parameters) {...};
</code></p>

<p>国外有一个网站就用一个域名光介绍Block的这五种使用场景，真够浪费这域名的。<a href="http://fuckingblocksyntax.com/">fuckingblocksyntax</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[切换移动网络开关的扩展]]></title>
    <link href="http://victorjiang.github.io/blog/2014/12/13/qie-huan-yi-dong-wang-luo-kai-guan-de-kuo-zhan/"/>
    <updated>2014-12-13T15:12:31+08:00</updated>
    <id>http://victorjiang.github.io/blog/2014/12/13/qie-huan-yi-dong-wang-luo-kai-guan-de-kuo-zhan</id>
    <content type="html"><![CDATA[<p>当初看到<a href="http://weibo.com/6david9?from=myfollow_group">6david9</a>的一篇博客<a href="http://blog.cocoabit.com/blog/2014/09/29/shi-yongcoretelephony-zhong-de-si-you-jie-kou-she-zhi-yi-dong-wang-luo-kai-guan/">使用 CORETELEPHONY 中的私有接口设置移动网络开关</a>，然后想到给它加一个Today类型的Extension，直接下拉就可以快速设置，配上系统自带的上拉设置WiFi，堪称完美。</p>

<!--more-->


<p>项目地址：<a href="https://github.com/victorjiang/MobileDataSwitch">https://github.com/victorjiang/MobileDataSwitch</a></p>

<p>设置网络开关的私有接口：</p>

<p><code>
extern BOOL CTCellularDataPlanGetIsEnabled();   // 查询
extern void CTCellularDataPlanSetIsEnabled(BOOL enabled);   // 设置
</code></p>

<p>需要添加 CoreTelephony.framework 框架</p>

<p>第一次使用Widget，TodayViewController的视图是居中显示的</p>

<!-- 图1 -->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/cellular_extension_1.jpg" alt="cellular_extension_1" /></p>

<p>之后下拉的时候，Widget的内容会向上偏移</p>

<!-- 图2 -->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/cellular_extension_2.jpg" alt="cellular_extension_2" /></p>

<p>原因是TodayViewController的<code>- widgetMarginInsetsForProposedMarginInsets:defaultMarginInsets</code>方法</p>

<p>```
&ndash; (UIEdgeInsets)widgetMarginInsetsForProposedMarginInsets:(UIEdgeInsets)defaultMarginInsets
{</p>

<pre><code>//defaultMarginInsets = (top = 0, left = 47, bottom = 39, right = 0)
</code></pre>

<p>}
```</p>

<p>默认下边距有39个单位，解决办法为修改下边距为0，这样视图就居中了。</p>

<p>```
&ndash; (UIEdgeInsets)widgetMarginInsetsForProposedMarginInsets:(UIEdgeInsets)defaultMarginInsets
{</p>

<pre><code>defaultMarginInsets.bottom = 0;
return defaultMarginInsets;
</code></pre>

<p>}
```</p>

<!-- 图3 -->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/cellular_extension_3.jpg" alt="cellular_extension_3" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在iOS中使用Icon Font]]></title>
    <link href="http://victorjiang.github.io/blog/2014/06/17/zai-ios-zhong-shi-yong-icon-font/"/>
    <updated>2014-06-17T10:16:03+08:00</updated>
    <id>http://victorjiang.github.io/blog/2014/06/17/zai-ios-zhong-shi-yong-icon-font</id>
    <content type="html"><![CDATA[<!-- photo 1 -->


<p><img src="http://victorjiang.github.io/images/2014/icon_font_1.jpg" alt="photo 1" /></p>

<p>最近公司在做一个OA项目,项目中有一个天气模块,这边天气的数据接口是由<a href="http://cj.weather.com.cn/">国家气象局</a>提供,接口同时提供了天气图标,不过需要通过图标的网络地址去加载,而且大小风格固定,不一定适合App的样式.是就将用该图标还是让美工设计一套?</p>

<!--more-->


<p>于是乎打算去网上找找有没有类似的天气类的应用,在GitHub上找到一个<a href="https://github.com/CZWeatherKit/CZWeatherKit">CZWeatherKit</a>的开源应用,运行了下,这界面,这图标正是我想要的iOS7风格,但在工程里并没有找到任何天气的图标,遂研究一下他的代码.</p>

<p>最终在绘制界面的代码中找到了答案:</p>

<p><code>
self.weatherView.conditionIconLabel.text = [NSString stringWithFormat:@"%c", condition.climaconCharacter];
</code>
但是,可是,怎么会用一个<code>UILabel</code>去展示一个图标,是不是错了?怎么是<code>conditionIconLabel</code>,于是从label.text的赋值查找,<code>condition.climaconCharacter</code>的类型是<code>Climacon</code>,看定义是一个枚举类型,每一个元素都是一个字符.</p>

<p>```
typedef enum {</p>

<pre><code>ClimaconCloud                   = '!',
ClimaconCloudSun                = '"',
ClimaconCloudMoon               = '#',

ClimaconRain                    = '$',
ClimaconRainSun                 = '%',
ClimaconRainMoon                = '&amp;',

ClimaconRainAlt                 = '\'',
ClimaconRainSunAlt              = '(',
ClimaconRainMoonAlt             = ')',

ClimaconDownpour                = '*',
ClimaconDownpourSun             = '+',
ClimaconDownpourMoon            = ',',

ClimaconDrizzle                 = '-',
ClimaconDrizzleSun              = '.',
ClimaconDrizzleMoon             = '/',

ClimaconSleet                   = '0',
ClimaconSleetSun                = '1',
ClimaconSleetMoon               = '2',

ClimaconHail                    = '3',
ClimaconHailSun                 = '4',
ClimaconHailMoon                = '5',

ClimaconFlurries                = '6',
ClimaconFlurriesSun             = '7',
ClimaconFlurriesMoon            = '8',

ClimaconSnow                    = '9',
ClimaconSnowSun                 = ':',
ClimaconSnowMoon                = ';',

ClimaconFog                     = '&lt;',
ClimaconFogSun                  = '=',
ClimaconFogMoon                 = '&gt;',

ClimaconHaze                    = '?',
ClimaconHazeSun                 = '@',
ClimaconHazeMoon                = 'A',

ClimaconWind                    = 'B',
ClimaconWindCloud               = 'C',
ClimaconWindCloudSun            = 'D',
ClimaconWindCloudMoon           = 'E',

ClimaconLightning               = 'F',
ClimaconLightningSun            = 'G',
ClimaconLightningMoon           = 'H',

ClimaconSun                     = 'I',
ClimaconSunset                  = 'J',
ClimaconSunrise                 = 'K',
ClimaconSunLow                  = 'L',
ClimaconSunLower                = 'M',

ClimaconMoon                    = 'N',
ClimaconMoonNew                 = 'O',
ClimaconMoonWaxingCrescent      = 'P',
ClimaconMoonWaxingQuarter       = 'Q',
ClimaconMoonWaxingGibbous       = 'R',
ClimaconMoonFull                = 'S',
ClimaconMoonWaningGibbous       = 'T',
ClimaconMoonWaningQuarter       = 'U',
ClimaconMoonWaningCrescent      = 'V',

ClimaconSnowflake               = 'W',
ClimaconTornado                 = 'X',

ClimaconThermometer             = 'Y',
ClimaconThermometerLow          = 'Z',
ClimaconThermometerMediumLoew   = '[',
ClimaconThermometerMediumHigh   = '\\',
ClimaconThermometerHigh         = ']',
ClimaconThermometerFull         = '^',
ClimaconCelsius                 = '_',
ClimaconFahrenheit              = '\'',
ClimaconCompass                 = 'a',
ClimaconCompassNorth            = 'b',
ClimaconCompassEast             = 'c',
ClimaconCompassSouth            = 'd',
ClimaconCompassWest             = 'e',

ClimaconUmbrella                = 'f',
ClimaconSunglasses              = 'g',

ClimaconCloudRefresh            = 'h',
ClimaconCloudUp                 = 'i',
ClimaconCloudDown               = 'j'
</code></pre>

<p>} Climacon;
```</p>

<p>又产生一个疑问,既然是字符,<code>UILabel</code>不是应该显示该字符吗?<code>conditionIconLabel</code>在初始化的时候设置了字体为:</p>

<p>```
// UIFont name of the Climacon font</p>

<h1>define CLIMACON_FONT @&ldquo;Climacons-Font&rdquo;</h1>

<p>&hellip;</p>

<p>[self.conditionIconLabel setFont:[UIFont fontWithName:CLIMACON_FONT size:fontSize]];
```</p>

<p>原来是用的自定义的Icon字体,字体文件<code>Climacons.ttf</code>.下面进入正题.</p>

<h2>一、如何使用自定义字体</h2>

<p>在讲Icon Font之前,先来看看普通自定义字体是如何使用的.</p>

<h3>1.导入字体文件</h3>

<!-- photo 2 -->


<p><img src="http://victorjiang.github.io/images/2014/icon_font_2.png" alt="photo 2" /></p>

<h3>2.配置.plist文件</h3>

<p>在.plist文件中注册自定义字体</p>

<!-- photo 3 -->


<p><img src="http://victorjiang.github.io/images/2014/icon_font_3.png" alt="photo 3" /></p>

<h3>3.找到自定义字体名称</h3>

<p>注册完之后,需要检测自定义字体是否注册成功,并获取新字体名称,检测方法就是遍历所有安装字体,查看是否包含新注册字体:</p>

<p>```
for (NSString *familyName in [UIFont familyNames]) {</p>

<pre><code>    NSLog(@"familyName = %@", familyName);

    for (NSString *fontName in [UIFont fontNamesForFamilyName:familyName]) {
        NSLog(@"    fontName = %@", fontName);
    }
}
</code></pre>

<p>```</p>

<p>查看控制台打印出来的所有字体是否有新注册的字体,如果有,则注册成功,并记住字体名(<code>Kaushan Script</code>),后面会用到.</p>

<!-- photo 4 -->


<p><img src="http://victorjiang.github.io/images/2014/icon_font_4.png" alt="photo 4" /></p>

<h3>4.使用自定义字体</h3>

<p>只要设置<code>UILabel</code>的<code>font</code>为自定义字体即可</p>

<p>```
self.label.font = [UIFont fontWithName:@&ldquo;Kaushan Script&rdquo; size:35];</p>

<pre><code>self.label.text = @"Hello World";
self.label.textColor = [UIColor blueColor];
</code></pre>

<p>```</p>

<!-- photo 5 -->


<p><img src="http://victorjiang.github.io/images/2014/icon_font_5.png" alt="photo 5" /></p>

<h2>二、如何使用Icon Font</h2>

<p>这里我使用上面天气的图标字体文件<code>Climacons.ttf</code></p>

<h3>1.导入图标字体文件</h3>

<h3>2.配置.plist文件</h3>

<p>前两部和普通字体一样将字体注册到项目中</p>

<h3>3.找到图标对应的Unicode编码</h3>

<!-- photo 6 -->


<p><img src="http://victorjiang.github.io/images/2014/icon_font_6.png" alt="photo 6" /></p>

<p>从图中可以看出类似<code>E800</code>就是各Icon的Unicode码</p>

<h3>4.使用Icon Font</h3>

<p>使用图标字体只需要两步:</p>

<ol>
<li>设置控件的font属性为Icon Font</li>
<li>赋值Unicode码</li>
</ol>


<p><code>
self.label.font = [UIFont fontWithName:@"fontello" size:40];
self.label.text = @"\ue800";
</code></p>

<p>这样UILabel上就显示了上面的Google图标.</p>

<p>这里注意如何使用Unicode码,</p>

<ol>
<li>使用<code>\u</code>前缀,后面跟四位Unicode码</li>
<li>使用<code>\U</code>前缀,后面跟八位Unicode码</li>
</ol>


<p>比如上面的赋值还可以这样:</p>

<p><code>
self.label.text = @"\U0000e800";
</code></p>

<p>Icon Font的使用虽然很简单,只有两步,但是可读性却很低,不对照上面的图,根本不知道<code>E800</code>对应的是哪张图.可以用一些常量来命名,使阅读者可以清楚其意义</p>

<p><code>
static NSString * const CustomIconFont_Google = @"\ue800";
static NSString * const CustomIconFont_GitHub = @"\ue801";
static NSString * const CustomIconFont_CSS3 = @"\ue802";
static NSString * const CustomIconFont_Apple = @"\ue803";
static NSString * const CustomIconFont_HTML5 = @"\ue804";
</code></p>

<pre><code>注:可以从上面的`CZWeatherKit`看出,他定义了一个enum的`Climacon`,这边不是通过Unicode码来使用Icon Font的,他是通过Name来使用的.
</code></pre>

<p>这里引出一个问题,笔者到现在还没有解决,网上关于Icon Font的资料都是通过Unicode来使用,但是在<code>CZWeatherKit</code>的项目中,是通过Name来使用,打开两者的字体文件,都可以查看到Unicode和Name对应的值,笔者尝试更换Icon Font的使用方式,在<code>CZWeatherKit</code>中通过Unicode对应的值给UILabel赋值,在上面的学习项目中修改通过Name对应的值来给UILabel赋值,结果都不成功.</p>

<p>以及如何通过Index Mode来访问Icon Font,就这一问题,笔者在<a href="http://www.zhihu.com/question/24095915">知乎</a>上也提问了,希望有知道的同学不吝赐教.</p>

<p>参考文章:<a href="http://ued.taobao.org/blog/2013/09/icon-font-in-ios/">在iOS中使用icon font</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[APNs推送实践]]></title>
    <link href="http://victorjiang.github.io/blog/2014/04/01/apnstui-song-shi-jian/"/>
    <updated>2014-04-01T23:01:49+08:00</updated>
    <id>http://victorjiang.github.io/blog/2014/04/01/apnstui-song-shi-jian</id>
    <content type="html"><![CDATA[<p>关于APNs苹果官方有详细介绍，之前我也整理了一份翻译篇<a href="http://victorjiang.github.io/blog/2014/04/01/yi-ping-guo-tui-song-tong-zhi-fu-wu/">《苹果推送通知服务》</a>，由于水平有限，翻译可能存在错误，不过可以起到参考作用，还请指出错误之处，以便及时纠正。</p>

<!--more-->


<p>下面就APNs的一些实践操作进行介绍，包括前期的证书申请以及代码操作：</p>

<h2>一、申请证书</h2>

<h3>1.CSR文件</h3>

<p>通过Keychain Access申请一个CSR文件（CertificateSigningRequest.certSigningRequest），保存到磁盘。</p>

<!--添加图片1-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_prac_1.jpg" alt="apns_prac_1" /></p>

<h3>2.创建App ID</h3>

<p>Bundle ID不能使用通配的，通配的Bundle ID不能用来推送。</p>

<!--添加图片2-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_prac_2.jpg" alt="apns_prac_2" /></p>

<p>App Services勾选Push Notifications</p>

<!--添加图片3-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_prac_3.jpg" alt="apns_prac_3" /></p>

<h3>3.创建开发/发布证书</h3>

<p>根据情况选择创建开发还是发布证书</p>

<!--添加图片4-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_prac_4.jpg" alt="apns_prac_4" /></p>

<p>  或者从App ID里创建</p>

<!--添加图片5-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_prac_5.jpg" alt="apns_prac_5" /></p>

<p>选择刚才创建的App ID</p>

<!--添加图片6-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_prac_6.jpg" alt="apns_prac_6" /></p>

<p>选择CSR文件生成证书（apns.cer），并下载本地。</p>

<!--添加图片7-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_prac_7.jpg" alt="apns_prac_7" /></p>

<!--添加图片8-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_prac_8.jpg" alt="apns_prac_8" /></p>

<h3>4.创建Provisioning Profile文件</h3>

<p>选择profile文件类型</p>

<!--添加图片9-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_prac_9.png" alt="apns_prac_9" /></p>

<p>选择App ID</p>

<!--添加图片10-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_prac_10.jpg" alt="apns_prac_10" /></p>

<p>选择证书、设备后生成文件（apns.mobileprovision），并下载。</p>

<!--添加图片11-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_prac_11.jpg" alt="apns_prac_11" /></p>

<!--添加图片12-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_prac_12.jpg" alt="apns_prac_12" /></p>

<h3>5.导出密钥</h3>

<p>在Keychain Access中导出之前创建的证书的密钥（apns.p12），这里需要对密钥文件进行加密。</p>

<!--添加图片13-->


<p style="text-align:center;"><img src="http://victorjiang.github.io/images/2014/apns_prac_13.png" alt="apns_prac_13" /></p>

<h3>6.证书处理</h3>

<p>现在我们有下面几个文件：</p>

<ol>
<li>CertificateSigningRequest.certSigningRequest</li>
<li>apns.cer</li>
<li>apns.mobileprovision</li>
<li>apns.p12</li>
</ol>


<p>处理证书是为了让我们的服务端能够可以给APNs发送通知，对于不同的服务端，证书的处理也不同。</p>

<ol>
<li>openssl x509 -in apns.cer -inform der -out PushChatCert.pem</li>
<li>openssl pkcs12 -nocerts -out PushChatKey.pem -in apns.p12</li>
<li>cat PushChatCert.pem PushChatKey.pem > ck.pem</li>
</ol>


<p>如果服务端是.net，第三步需要用下面的命令生成证书</p>

<pre><code>openssl pkcs12 -export -in PushChatCert.pem -inkey PushChatKey.pem -certfile CertificateSigningRequest.certSigningRequest -name "apns_web" -out apns_web.p12
</code></pre>

<h2>二、代码操作</h2>

<p><font color='red'>注</font>：项目的Bundle Identify需要与创建的App ID保持一致</p>

<h3>1.注册推送</h3>

<pre><code>
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{

    [[UIApplication sharedApplication] registerForRemoteNotificationTypes:UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound | UIRemoteNotificationTypeAlert];

    return YES;
}
</code></pre>


<ul>
<li>注册成功</li>
</ul>


<pre><code>
- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken
{
    //注册成功，去除deviceToken中的空格和<>
    
    NSLog(@"register success:%@", deviceToken);
    NSString *token = [[[deviceToken description] stringByTrimmingCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@"<>"]] stringByReplacingOccurrencesOfString:@" " withString:@""];
    
}
</code></pre>


<ul>
<li>注册失败</li>
</ul>


<pre><code>
- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error
{
    
}
</code></pre>


<h3>2.接收通知</h3>

<p>接收通知根据App的状态分为三种情况：</p>

<h4>2.1 App未运行</h4>

<p>此时didFinishLaunchingWithOptions方法将被调用</p>

<pre><code>
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    NSDictionary *userInfo = [launchOptions objectForKey: UIApplicationLaunchOptionsRemoteNotificationKey];
    
    //通过userInfo判断程序是通过点击推送通知启动还是正常启动
}
</code></pre>


<h4>2.2 App后台运行</h4>

<p>当用户点击推送消息的时候才会调用下面的方法</p>

<pre><code>
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo
{
    // 处理推送消息
    NSLog(@"userinfo:%@",userInfo);
    
}
</code></pre>


<h4>2.3 App前台运行</h4>

<p>当App正在运行的时候会自动调用上面的didReceiveRemoteNotification方法，此时App的applicationState值为UIApplicationStateActive。</p>

<h4>iOS 7新增方法</h4>

<pre><code>
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult result))completionHandler;
</code></pre>


<h2>参考文章</h2>

<ol>
<li><a href="http://blog.csdn.net/showhilllee/article/details/8631734">一步一步教你做ios推送</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_4adf31ea010175wo.html">net发送apns解决方案（iphone push）</a></li>
<li><a href="http://docs.jpush.cn/pages/viewpage.action?pageId=4259879">获取 APNs 推送内容</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
